<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>singleton on wlsc_Tech_blog</title>
    <link>https://blog.wlsc.de/tags/singleton/</link>
    <description>Recent content in singleton on wlsc_Tech_blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Sep 2016 20:11:31 +0000</lastBuildDate><atom:link href="https://blog.wlsc.de/tags/singleton/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Double-Checked Locking Pattern with Lazy Singletone Initialization</title>
      <link>https://blog.wlsc.de/2016/09/05/double-checked-locking-pattern-with-lazy-singletone-initialization/</link>
      <pubDate>Mon, 05 Sep 2016 20:11:31 +0000</pubDate>
      
      <guid>https://blog.wlsc.de/2016/09/05/double-checked-locking-pattern-with-lazy-singletone-initialization/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img class=&#34;aligncenter size-medium wp-image-219&#34; src=&#34;https://blog.wlsc.de/images/2016/09/keep-calm-and-double-check-257x300.png&#34; alt=&#34;Keep calm and double check&#34; width=&#34;257&#34; height=&#34;300&#34; srcset=&#34;https://blog.wlsc.de/images/2016/09/keep-calm-and-double-check-257x300.png 257w, https://blog.wlsc.de/images/2016/09/keep-calm-and-double-check.png 600w&#34; sizes=&#34;(max-width: 257px) 100vw, 257px&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;In the real world of multicore processors, we have to write multi-threaded applications that would use all cores efficiently. This is very practical, when it comes to high-loaded servers (with a high amount of users trying to access service at the same time). For instance, after you have successfully introduced the new functionality on your web service or fixed some bugs, your first intuition would be to release the new version as soon as possible. At this point, when your users start to access your web service simultaneously, a situation may arise, when two or more users will initialize the same singleton or field value more than once. This is not a favorable type of scenario. It is also the main reason your applications should be ready to initialize its singletons (and not only) properly!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
